/* Sockets Example
 * Copyright (c) 2016-2020 ARM Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "mbed-trace/mbed_trace.h"
#include "mbed.h"
#include <cstdint>

static constexpr size_t MAX_MESSAGE_RECEIVED_LENGTH = 100;

static constexpr size_t REMOTE_PORT = 13000;
Thread thread;
NetworkInterface *_net;
TCPSocket _socket;
//UDPSocket _socket;

void print_network_info() {
  /* print the network info */
  SocketAddress a;
  _net->get_ip_address(&a);
  printf("IP address: %s\r\n",
         a.get_ip_address() ? a.get_ip_address() : "None");
  _net->get_netmask(&a);
  printf("Netmask: %s\r\n", a.get_ip_address() ? a.get_ip_address() : "None");
  _net->get_gateway(&a);
  printf("Gateway: %s\r\n", a.get_ip_address() ? a.get_ip_address() : "None");
}

void send_packet_task() {
  bool running = true;
  /* loop until whole request sent */
  uint8_t buffer[451] = {0x01, 0xAB, 0xCD, 0xEF, 0xAB, 0x02, 0xCD, 0xEF, 0xAB, 0xCD, 0x03,
0xEF, 0xAB, 0xCD, 0xEF, 0x04, 0xAB, 0xCD, 0xEF, 0xAB, 0x05, 0xCD,
0xEF, 0xAB, 0xCD, 0x06, 0xEF, 0xAB, 0xCD, 0xEF, 0x07, 0xAB, 0xCD,
0xEF, 0xAB, 0x08, 0xCD, 0xEF, 0xAB, 0xCD, 0x09, 0xEF, 0xAB, 0xCD,
0xEF, 0x10, 0xAB, 0xCD, 0xEF, 0xAB, 0x11, 0xCD, 0xEF, 0xAB, 0xCD,
0x12, 0xEF, 0xAB, 0xCD, 0xEF, 0x13, 0xAB, 0xCD, 0xEF, 0xAB, 0x14,
0xCD, 0xEF, 0xAB, 0xCD, 0x15, 0xEF, 0xAB, 0xCD, 0xEF, 0x16, 0xAB,
0xCD, 0xEF, 0xAB, 0x17, 0xCD, 0xEF, 0xAB, 0xCD, 0x18, 0xEF, 0xAB,
0xCD, 0xEF, 0x01, 0xAB, 0xCD, 0xEF, 0xAB, 0x02, 0xCD, 0xEF, 0xAB,
0xCD, 0x03, 0xEF, 0xAB, 0xCD, 0xEF, 0x04, 0xAB, 0xCD, 0xEF, 0xAB,
0x05, 0xCD, 0xEF, 0xAB, 0xCD, 0x06, 0xEF, 0xAB, 0xCD, 0xEF, 0x07,
0xAB, 0xCD, 0xEF, 0xAB, 0x08, 0xCD, 0xEF, 0xAB, 0xCD, 0x09, 0xEF,
0xAB, 0xCD, 0xEF, 0x10, 0xAB, 0xCD, 0xEF, 0xAB, 0x11, 0xCD, 0xEF,
0xAB, 0xCD, 0x12, 0xEF, 0xAB, 0xCD, 0xEF, 0x13, 0xAB, 0xCD, 0xEF,
0xAB, 0x14, 0xCD, 0xEF, 0xAB, 0xCD, 0x15, 0xEF, 0xAB, 0xCD, 0xEF,
0x16, 0xAB, 0xCD, 0xEF, 0xAB, 0x17, 0xCD, 0xEF, 0xAB, 0xCD, 0x18,
0xEF, 0xAB, 0xCD, 0xEF, 0x01, 0xAB, 0xCD, 0xEF, 0xAB, 0x02, 0xCD,
0xEF, 0xAB, 0xCD, 0x03, 0xEF, 0xAB, 0xCD, 0xEF, 0x04, 0xAB, 0xCD,
0xEF, 0xAB, 0x05, 0xCD, 0xEF, 0xAB, 0xCD, 0x06, 0xEF, 0xAB, 0xCD,
0xEF, 0x07, 0xAB, 0xCD, 0xEF, 0xAB, 0x08, 0xCD, 0xEF, 0xAB, 0xCD,
0x09, 0xEF, 0xAB, 0xCD, 0xEF, 0x10, 0xAB, 0xCD, 0xEF, 0xAB, 0x11,
0xCD, 0xEF, 0xAB, 0xCD, 0x12, 0xEF, 0xAB, 0xCD, 0xEF, 0x13, 0xAB,
0xCD, 0xEF, 0xAB, 0x14, 0xCD, 0xEF, 0xAB, 0xCD, 0x15, 0xEF, 0xAB,
0xCD, 0xEF, 0x16, 0xAB, 0xCD, 0xEF, 0xAB, 0x17, 0xCD, 0xEF, 0xAB,
0xCD, 0x18, 0xEF, 0xAB, 0xCD, 0xEF, 0x01, 0xAB, 0xCD, 0xEF, 0xAB,
0x02, 0xCD, 0xEF, 0xAB, 0xCD, 0x03, 0xEF, 0xAB, 0xCD, 0xEF, 0x04,
0xAB, 0xCD, 0xEF, 0xAB, 0x05, 0xCD, 0xEF, 0xAB, 0xCD, 0x06, 0xEF,
0xAB, 0xCD, 0xEF, 0x07, 0xAB, 0xCD, 0xEF, 0xAB, 0x08, 0xCD, 0xEF,
0xAB, 0xCD, 0x09, 0xEF, 0xAB, 0xCD, 0xEF, 0x10, 0xAB, 0xCD, 0xEF,
0xAB, 0x11, 0xCD, 0xEF, 0xAB, 0xCD, 0x12, 0xEF, 0xAB, 0xCD, 0xEF,
0x13, 0xAB, 0xCD, 0xEF, 0xAB, 0x14, 0xCD, 0xEF, 0xAB, 0xCD, 0x15,
0xEF, 0xAB, 0xCD, 0xEF, 0x16, 0xAB, 0xCD, 0xEF, 0xAB, 0x17, 0xCD,
0xEF, 0xAB, 0xCD, 0x18, 0xEF, 0xAB, 0xCD, 0xEF, 0x01, 0xAB, 0xCD,
0xEF, 0xAB, 0x02, 0xCD, 0xEF, 0xAB, 0xCD, 0x03, 0xEF, 0xAB, 0xCD,
0xEF, 0x04, 0xAB, 0xCD, 0xEF, 0xAB, 0x05, 0xCD, 0xEF, 0xAB, 0xCD,
0x06, 0xEF, 0xAB, 0xCD, 0xEF, 0x07, 0xAB, 0xCD, 0xEF, 0xAB, 0x08,
0xCD, 0xEF, 0xAB, 0xCD, 0x09, 0xEF, 0xAB, 0xCD, 0xEF, 0x10, 0xAB,
0xCD, 0xEF, 0xAB, 0x11, 0xCD, 0xEF, 0xAB, 0xCD, 0x12, 0xEF, 0xAB,
0xCD, 0xEF, 0x13, 0xAB, 0xCD, 0xEF, 0xAB, 0x14, 0xCD, 0xEF, 0xAB,
0xCD, 0x15, 0xEF, 0xAB, 0xCD, 0xEF, 0x16, 0xAB, 0xCD, 0xEF, 0xAB,
0x17, 0xCD, 0xEF, 0xAB, 0xCD, 0x18, 0xEF, 0xAB, 0xCD, 0xEF};

  //nsapi_size_t bytes_to_send = 90;
  //nsapi_size_or_error_t bytes_sent = 0;

  // printf("\r\nSending message: \r\n%s", buffer);
  while (running) {
    nsapi_size_t bytes_to_send = 451;
    nsapi_size_or_error_t bytes_sent = 0;
    while (bytes_to_send) {
      bytes_sent = _socket.send(buffer + bytes_sent, bytes_to_send);
      if (bytes_sent < 0) {
        printf("Error! _socket.send() returned: %d\r\n", bytes_sent);
        running = false;
      } else {
        // printf("sent %d bytes\r\n", bytes_sent);
      }

      bytes_to_send -= bytes_sent;
    }
    //wait_us(10);
    // printf("Complete message sent\r\n");
  }
}

void run() {
  _net = NetworkInterface::get_default_instance();
  if (!_net) {
    printf("Error! No network interface found.\r\n");
    return;
  }
  /* connect will perform the action appropriate to the interface type to
   * connect to the network */

  printf("Connecting to the network...\r\n");

  nsapi_size_or_error_t result = _net->connect();
  if (result != 0) {
    printf("Error! _net->connect() returned: %d\r\n", result);
    return;
  }

  print_network_info();

  /* opening the socket only allocates resources */
  result = _socket.open(_net);
  if (result != 0) {
    printf("Error! _socket.open() returned: %d\r\n", result);
    return;
  }

  /* now we have to find where to connect */

  SocketAddress address;

  address.set_ip_address("172.16.0.195");

  address.set_port(REMOTE_PORT);

  /* we are connected to the network but since we're using a connection
   * oriented protocol we still need to open a connection on the socket */

  printf("Opening connection to remote port %d\r\n", REMOTE_PORT);

  result = _socket.connect(address);
  if (result != 0) {
    printf("Error! _socket.connect() returned: %d\r\n", result);
    return;
  }

  thread.start(send_packet_task);
  while (true) {
    ThisThread::sleep_for(5s);
  }

  /* exchange an HTTP request and response

  if (!send_http_request()) {
    return;
  }

  if (!receive_http_response()) {
    return;
  }
*/
  printf("Demo concluded successfully \r\n");
}

bool resolve_hostname(SocketAddress &address) {
  const char hostname[] = MBED_CONF_APP_HOSTNAME;

  /* get the host address */
  printf("\nResolve hostname %s\r\n", hostname);
  nsapi_size_or_error_t result = _net->gethostbyname(hostname, &address);
  if (result != 0) {
    printf("Error! gethostbyname(%s) returned: %d\r\n", hostname, result);
    return false;
  }

  printf("%s address is %s\r\n", hostname,
         (address.get_ip_address() ? address.get_ip_address() : "None"));

  return true;
}

int main() {
  printf("mbed-os-rev: %d.%d.%d\r\n", MBED_MAJOR_VERSION, MBED_MINOR_VERSION,
         MBED_PATCH_VERSION);
  printf("\r\nStarting socket demo\r\n\r\n");

#ifdef MBED_CONF_MBED_TRACE_ENABLE
  mbed_trace_init();
#endif

  run();

  return 0;
}
